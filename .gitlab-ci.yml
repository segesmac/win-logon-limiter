image: ${DOCKER_REGISTRY}docker:26.1.1

stages:
  - test
  - build
  - inttest
  - deploy

services:
  - name: docker:26.1.1-dind

# This variable is here purely to get around the fact that the docker:dind container is not set up for multi-platform builds
# See https://github.com/docker-library/docker/issues/477
variables:
  TEST_INTEGRATION_USE_SNAPSHOTTER: true

# Created version branch, and can actually access it through GitHub's API - no need for using git
get-version-number-job:
  stage: .pre
  image:
    #name: mcr.microsoft.com/powershell:lts-7.2-ubuntu-22.04
    name: ${MICROSOFT_REGISTRY}powershell:lts-7.2-ubuntu-22.04
  tags:
    - docker
  script:
    - pwsh -command 'Get-ChildItem "env:"'
    - pwsh -command './build_tasks_pre/000_get_version.ps1'
  artifacts:
    reports:
      dotenv: build.env

unit-test-job:
  stage: test
  tags:
    - docker
  script:
    - cd webobjects/phpunit
    - export DOCKER_IMAGE="${DOCKER_REGISTRY}php:bookworm"
    - docker-compose -f docker-compose-tests.yml run --rm composer require --dev phpunit/phpunit
    - docker-compose -f docker-compose-tests.yml run --rm phpunit --colors=never --log-junit phpunit-report.xml phpunit/tests
  artifacts:
    reports:
      junit: webobjects/phpunit-report.xml
  needs: []
  

build-job:
  stage: build
  tags:
    - docker
  script:
    - env
    - echo "BRANCH LABEL '$BRANCH_LABEL'" # This is generated in the .pre stage
    - echo "Building version number '$VERSION_NUMBER-$BRANCH_LABEL'"
    #- docker buildx ls
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "REGISTRY IMAGE '$CI_REGISTRY_IMAGE'"
    - DOCKER_IMAGE="$CI_REGISTRY_IMAGE/win-logon-limiter"
    - cd webobjects
    - docker build -t $DOCKER_IMAGE:$VERSION_NUMBER-$BRANCH_LABEL -t $DOCKER_IMAGE:$BRANCH_LABEL-latest -t $DOCKER_IMAGE:$BRANCH_LABEL-amd64 --platform linux/amd64 .
    - docker push $DOCKER_IMAGE --all-tags
  needs: ["get-version-number-job"]

build-arm-job:
  stage: build
  tags:
    - docker-arm
  script:
    - env
    - echo "BRANCH LABEL '$BRANCH_LABEL'" # This is generated in the .pre stage
    - echo "Building version number '$VERSION_NUMBER-$BRANCH_LABEL'"
    #- docker buildx ls
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "REGISTRY IMAGE '$CI_REGISTRY_IMAGE'"
    - DOCKER_IMAGE="$CI_REGISTRY_IMAGE/win-logon-limiter-arm"
    - cd webobjects
    #- docker build -t $DOCKER_IMAGE:$VERSION_NUMBER-$BRANCH_LABEL -t $DOCKER_IMAGE:latest-$BRANCH_LABEL --platform linux/amd64 .
    #- docker push $DOCKER_IMAGE --all-tags
    # had to run this once to allow for arm64 builds: docker run --rm --privileged docker/binfmt:66f9012c56a8316f9244ffd7622d7c21c1f6f28d
    # this link was helpful: https://stackoverflow.com/questions/70757791/build-linux-arm64-docker-image-on-linux-amd64-host
    #- docker context create tls-environment
    #- docker buildx create --name multi-arch-builder --driver docker-container --use tls-environment
    #- docker buildx build -t $DOCKER_IMAGE:$VERSION_NUMBER-$BRANCH_LABEL -t $DOCKER_IMAGE:$BRANCH_LABEL-latest -t $DOCKER_IMAGE:$BRANCH_LABEL-arm64v8 --platform linux/arm64 --push .
    - docker build -t $DOCKER_IMAGE:$VERSION_NUMBER-$BRANCH_LABEL -t $DOCKER_IMAGE:$BRANCH_LABEL-latest -t $DOCKER_IMAGE:$BRANCH_LABEL-arm64v8 --platform linux/arm64 .
    - docker push $DOCKER_IMAGE --all-tags
  needs: ["get-version-number-job"]

manifest-job:
  stage: build
  tags:
    - docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - DOCKER_IMAGE="$CI_REGISTRY_IMAGE/win-logon-limiter"
    - DOCKER_IMAGE_ARM="$CI_REGISTRY_IMAGE/win-logon-limiter-arm"
    - docker pull --all-tags --platform linux/arm64 $DOCKER_IMAGE_ARM
    - docker pull --all-tags --platform linux/amd64 $DOCKER_IMAGE
    - docker tag $DOCKER_IMAGE_ARM $DOCKER_IMAGE:$BRANCH_LABEL-arm64v8
    - docker push $DOCKER_IMAGE:$BRANCH_LABEL-arm64v8
    - docker manifest create $DOCKER_IMAGE:$BRANCH_LABEL-latest --amend $DOCKER_IMAGE:$VERSION_NUMBER-$BRANCH_LABEL --amend $DOCKER_IMAGE:$BRANCH_LABEL-arm64v8 --amend $DOCKER_IMAGE:$BRANCH_LABEL-amd64
    - docker manifest push $DOCKER_IMAGE:$BRANCH_LABEL-latest
  needs: ["get-version-number-job","build-arm-job","build-job"]

#int-test-job:  # probably need to set up a windows machine running the client and have it connect to the db for testing
int-test-job-linux:      # This job runs integration testing for the linux portion of this
  stage: inttest
  tags:
    - docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "BRANCH LABEL '$BRANCH_LABEL'" # This is generated in the .pre stage
    - export DOCKER_IMAGE="$CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$VERSION_NUMBER-$BRANCH_LABEL"
    - echo "DOCKER_IMAGE=$DOCKER_IMAGE"
    - docker pull $DOCKER_IMAGE
    - cd deployment
    - ls -al
    - ./setup.sh
    - cd ../webobjects/phpunit
    - docker-compose -f docker-compose-inttests.yml run --rm composer require --dev phpunit/phpunit
    - docker-compose -f docker-compose-inttests.yml run --rm phpunit /bin/bash -c "vendor/bin/phpunit --colors=never --log-junit phpunit-report.xml phpunit/inttests"
  artifacts:
    reports:
      junit: webobjects/phpunit-report.xml
  needs: ["get-version-number-job","build-job"]

update-version-number-job:
  stage: deploy
  image:
    name: ${MICROSOFT_REGISTRY}powershell:lts-7.2-ubuntu-22.04
  tags:
    - docker
  script:
    - pwsh -command 'Get-ChildItem "env:"'
    - pwsh -command './build_tasks_deploy/000_update_version.ps1'

deploy-job:      # This job runs in the deploy stage.
  stage: deploy
  tags:
    - docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - DOCKER_IMAGE="$CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$VERSION_NUMBER-$BRANCH_LABEL"
    - docker pull "$DOCKER_IMAGE"
    - DOCKER_IMAGE_NEW="segesmac/$CI_PROJECT_NAME"
    - docker tag $DOCKER_IMAGE $DOCKER_IMAGE_NEW:$VERSION_NUMBER
    - docker tag $DOCKER_IMAGE $DOCKER_IMAGE_NEW:latest
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
    - docker push $DOCKER_IMAGE_NEW:$VERSION_NUMBER
    - docker push $DOCKER_IMAGE_NEW:latest
  needs: ["get-version-number-job","build-job","int-test-job-linux"]
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_REF_NAME =~ "release.*"'

