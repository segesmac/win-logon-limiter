image: docker:26.1.1

stages:
  - test
  - build
#  - inttest
  - deploy

services:
  - docker:26.1.1-dind

# Created version branch, and can actually access it through GitHub's API - no need for using git
get-version-number-job:
  stage: .pre
  image:
    name: mcr.microsoft.com/powershell:lts-7.2-ubuntu-22.04
  tags:
    - docker
  script:
    - pwsh -command 'Get-ChildItem "env:"'
    - pwsh -command './build_tasks_pre/000_get_version.ps1'
  artifacts:
    reports:
      dotenv: build.env

unit-test-job:
  stage: test
  tags:
    - docker
  script:
    - cd phpunit
    - docker-compose -f docker-compose-tests.yml run --rm composer require --dev phpunit/phpunit
    - docker-compose -f docker-compose-tests.yml run --rm phpunit --colors=never --log-junit phpunit-report.xml phpunits/tests
  artifacts:
    reports:
      junit: phpunit-report.xml
  needs: []
  

build-job:
  stage: build
  tags:
    - docker
  script:
    - env
    - echo "BRANCH LABEL '$BRANCH_LABEL'" # This is generated in the .pre stage
    - echo "Building version number '$VERSION_NUMBER-$BRANCH_LABEL'"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "REGISTRY IMAGE '$CI_REGISTRY_IMAGE'"
    - DOCKER_IMAGE="$CI_REGISTRY_IMAGE/win-logon-limiter"
    - cd webobjects
    - docker build -t $DOCKER_IMAGE:$VERSION_NUMBER-$BRANCH_LABEL -t $DOCKER_IMAGE:latest-$BRANCH_LABEL .
    - docker push $DOCKER_IMAGE --all-tags

#int-test-job:  # probably need to set up a windows machine running the client and have it connect to the db for testing

update-version-number-job:
  stage: deploy
  image:
    name: mcr.microsoft.com/powershell:lts-7.2-ubuntu-22.04
  tags:
    - docker
  script:
    - pwsh -command 'Get-ChildItem "env:"'
    - pwsh -command './build_tasks_deploy/000_update_version.ps1'

deploy-job:      # This job runs in the deploy stage.
  stage: deploy
  tags:
    - docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - DOCKER_IMAGE="$CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$VERSION_NUMBER-$BRANCH_LABEL"
    - docker pull $DOCKER_IMAGE
    - DOCKER_IMAGE_NEW="segesmac/$CI_PROJECT_NAME"
    - docker tag $DOCKER_IMAGE $DOCKER_IMAGE_NEW:$VERSION_NUMBER
    - docker tag $DOCKER_IMAGE $DOCKER_IMAGE_NEW:latest
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
    - docker push $DOCKER_IMAGE_NEW:$VERSION_NUMBER
    - docker push $DOCKER_IMAGE_NEW:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_REF_NAME =~ "release.*"'



